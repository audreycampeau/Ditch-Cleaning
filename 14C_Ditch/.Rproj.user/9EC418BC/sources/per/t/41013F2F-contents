#Préparation des données

installed.packages("readxl")
        #installed.packages("ggplot2")
        #installed.packages("dplyr")
install.packages("ggthemes")
#install.packages("cli")
        #install.packages("tidyr")
install.packages("tidyverse")
#install.packages("remotes")  # Installer le package remotes s'il n'est pas déjà installé
#remotes::install_github("rstudio/ggthemes")


library(readxl)
#library(ggplot2)
#library(dplyr)
library(ggthemes)
#library(tidyr)
library(tidyverse)

#file.choose()
donnees <- read_xlsx("/Users/audreycampeau/Downloads/SarahEve/donnees_td_edited.xlsx")
donnees$Date=as.Date(donnees$Date)
donnees$Date_fonte=as.Date(donnees$Date_fonte)

#Section des boxplots avec la comparaison des lacs qui sont dans et hors de la SBL. **Ça ne fonctionne pas** 

donnees <- donnees %>%
  mutate(SITE = factor(SITE, levels = c("SBL", "HSBL")))  # Convertir la colonne SITE en facteur avec les niveaux SBL et HSBL

#Conductivité

plot_A=donnees %>%
  filter(SITE %in% c("SBL", "HSBL")) %>%
  ggplot(aes(x = SITE, y = Conductivite, fill = SITE)) +
  geom_boxplot() +
  geom_jitter()+
  scale_fill_manual(values = c("SBL" = "red", "HSBL" = "blue")) +  # Définir les couleurs pour chaque catégorie
  theme_minimal() +
  theme(
    legend.position = "none",
    plot.title = element_text(size = 11)
  ) +
  ggtitle("Comparaison de la conductivité entre les catégories SBL et HSBL") +
  xlab("Catégorie") +
  ylab("Conductivité")

#donnees <- donnees %>%
#  mutate(SITE = factor(SITE, levels = c("SBL", "HSBL")))  # Convertir la colonne SITE en facteur avec les niveaux SBL et HSBL

#Flux de CO2

plot_B=donnees %>%
  filter(SITE %in% c("SBL", "HSBL")) %>%
  ggplot(aes(x = SITE, y = Flux_CO2, fill = SITE)) +
  geom_boxplot() +
  geom_jitter()+
  scale_y_log10()+
  scale_fill_manual(values = c("SBL" = "red", "HSBL" = "blue")) +  # Définir les couleurs pour chaque catégorie
  theme_minimal() +
  theme(
    #legend.position = "none",
    plot.title = element_text(size = 11)
  ) +
  ggtitle("Comparaison de la conductivité entre les catégories SBL et HSBL") +
  xlab("Catégorie") +
  ylab("Flux CO2 (mg C/m2/jr)")

library(ggpubr)
ggarrange(plot_A, plot_B, nrow=2, ncol=1, common.legend = T)

#ZOO

donnees %>%
  filter(SITE %in% c("SBL", "HSBL")) %>%
  ggplot(aes(x = SITE, y = Richesse_Spécifique, fill = SITE)) +
  geom_boxplot() +
  scale_fill_manual(values = c("SBL" = "red", "HSBL" = "blue")) +  # Définir les couleurs pour chaque catégorie
  theme_minimal() +
  theme(
    legend.position = "none",
    plot.title = element_text(size = 11)
  ) +
  ggtitle("Comparaison de la conductivité entre les catégories SBL et HSBL") +
  xlab("Catégorie") +
  ylab("Conductivité")







#Comparer deux variables

# Créer un nuage de points avec pH en fonction de la conductivité = ça marche mais c'est laid, j'aurais aimé mieux l'autre

ggplot(donnees, aes(x = Conductivité, y = pH)) +
  geom_point() +  # Tracer un nuage de points
  theme_minimal() +  # Utiliser un thème minimal
  ggtitle("Nuage de points : pH en fonction de la conductivité") +  # Ajouter un titre
  xlab("Conductivité") +  # Ajouter une étiquette à l'axe des x
  ylab("pH")  # Ajouter une étiquette à l'axe des y

#Flux CO2 avec la température de l'eau = changer le nom des variables 

ggplot(donnees, aes(x = Temperature eau, y = Flux CO2)) +
  geom_point() +  # Tracer un nuage de points
  theme_minimal() +  # Utiliser un thème minimal
  ggtitle("Nuage de points : pH en fonction de la conductivité") +  # Ajouter un titre
  xlab("Conductivité") +  # Ajouter une étiquette à l'axe des x
  ylab("pH")  # Ajouter une étiquette à l'axe des y

#Conductivité et température = changer les variables

ggplot(donnees, aes(x = Conductivité, y = Température Air)) +
  geom_point() +  # Tracer un nuage de points
  theme_minimal() +  # Utiliser un thème minimal
  ggtitle("Nuage de points : pH en fonction de la conductivité") +  # Ajouter un titre
  xlab("Conductivité") +  # Ajouter une étiquette à l'axe des x
  ylab("pH")  # Ajouter une étiquette à l'axe des y

#Zoo plancton et pH

ggplot(donnees, aes(x = Richesse spécifique, y = Temperature eau)) +
  geom_point() +  # Tracer un nuage de points
  theme_minimal() +  # Utiliser un thème minimal
  ggtitle("Nuage de points : pH en fonction de la conductivité") +  # Ajouter un titre
  xlab("Conductivité") +  # Ajouter une étiquette à l'axe des x
  ylab("pH")  # Ajouter une étiquette à l'axe des y




#Diagramme de densité

# Supposons que votre dataframe s'appelle `donnees` et qu'il contient une colonne `Lac`
# et les colonnes suivantes : Flux_CO2, Conductivite, Temperature, Oxygene, Zooplancton

# Filtrer les données pour n'inclure que le lac Marois
donnees_marois <- donnees %>%
  filter(`NOM DU LAC` == "Marois")

# Transformer les données en format long
donnees_long <- donnees_marois %>%
  pivot_longer(cols = c(`Flux CO₂`, Conductivité, `Temperature eau`,`Emissions CO₂ Annuel`, Zooplancton, `Richesse Spécifique`
               values_to = "Valeur")

# Créer le diagramme de densité
ggplot(data = donnees_long, aes(x = Valeur, fill = Variable)) +
  geom_density(adjust = 1.5, alpha = 0.6) +
  facet_wrap(~Variable, scales = "free") +  # Facetter par variable avec des échelles libres pour chaque facette
  theme_minimal() +
  theme(
    legend.position = "none",
    panel.spacing = unit(0.1, "lines"),
    axis.ticks.x = element_blank(),
    plot.title = element_text(size = 14, face = "bold"),
    strip.text = element_text(size = 10)
  ) +
  ggtitle("Diagrammes de densité pour les différentes variables du lac Marois") +
  xlab("Valeur") +
  ylab("Densité")






#Pour les lolipops = ne fonctionne pas 

# Create data
data <- data.frame(
  x=LETTERS[1:26],
  y=abs(rnorm(26))
)

# Plot
ggplot(data, aes(x=x, y=y)) +
  geom_segment( aes(x=x, xend=x, y=0, yend=y), color="grey") +
  geom_point( color="orange", size=4) +
  theme_light() +
  theme(
    panel.grid.major.x = element_blank(),
    panel.border = element_blank(),
    axis.ticks.x = element_blank()
  ) +
  xlab("Test") +
  ylab("Value of Y")



